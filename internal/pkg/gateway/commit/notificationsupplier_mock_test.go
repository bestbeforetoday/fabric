// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package commit

import (
	ledger "github.com/hyperledger/fabric/core/ledger"
	mock "github.com/stretchr/testify/mock"
)

// MockNotificationSupplier is an autogenerated mock type for the NotificationSupplier type
type MockNotificationSupplier struct {
	mock.Mock
}

// CommitNotifications provides a mock function with given fields: done, channelName
func (_m *MockNotificationSupplier) CommitNotifications(done <-chan struct{}, channelName string) (<-chan *ledger.CommitNotification, error) {
	ret := _m.Called(done, channelName)

	var r0 <-chan *ledger.CommitNotification
	if rf, ok := ret.Get(0).(func(<-chan struct{}, string) <-chan *ledger.CommitNotification); ok {
		r0 = rf(done, channelName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *ledger.CommitNotification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(<-chan struct{}, string) error); ok {
		r1 = rf(done, channelName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
