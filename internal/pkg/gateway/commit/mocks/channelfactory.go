// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric/internal/pkg/gateway/commit"
)

type ChannelFactory struct {
	ChannelStub        func(string) (commit.Channel, error)
	channelMutex       sync.RWMutex
	channelArgsForCall []struct {
		arg1 string
	}
	channelReturns struct {
		result1 commit.Channel
		result2 error
	}
	channelReturnsOnCall map[int]struct {
		result1 commit.Channel
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ChannelFactory) Channel(arg1 string) (commit.Channel, error) {
	fake.channelMutex.Lock()
	ret, specificReturn := fake.channelReturnsOnCall[len(fake.channelArgsForCall)]
	fake.channelArgsForCall = append(fake.channelArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ChannelStub
	fakeReturns := fake.channelReturns
	fake.recordInvocation("Channel", []interface{}{arg1})
	fake.channelMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ChannelFactory) ChannelCallCount() int {
	fake.channelMutex.RLock()
	defer fake.channelMutex.RUnlock()
	return len(fake.channelArgsForCall)
}

func (fake *ChannelFactory) ChannelCalls(stub func(string) (commit.Channel, error)) {
	fake.channelMutex.Lock()
	defer fake.channelMutex.Unlock()
	fake.ChannelStub = stub
}

func (fake *ChannelFactory) ChannelArgsForCall(i int) string {
	fake.channelMutex.RLock()
	defer fake.channelMutex.RUnlock()
	argsForCall := fake.channelArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ChannelFactory) ChannelReturns(result1 commit.Channel, result2 error) {
	fake.channelMutex.Lock()
	defer fake.channelMutex.Unlock()
	fake.ChannelStub = nil
	fake.channelReturns = struct {
		result1 commit.Channel
		result2 error
	}{result1, result2}
}

func (fake *ChannelFactory) ChannelReturnsOnCall(i int, result1 commit.Channel, result2 error) {
	fake.channelMutex.Lock()
	defer fake.channelMutex.Unlock()
	fake.ChannelStub = nil
	if fake.channelReturnsOnCall == nil {
		fake.channelReturnsOnCall = make(map[int]struct {
			result1 commit.Channel
			result2 error
		})
	}
	fake.channelReturnsOnCall[i] = struct {
		result1 commit.Channel
		result2 error
	}{result1, result2}
}

func (fake *ChannelFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.channelMutex.RLock()
	defer fake.channelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ChannelFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commit.ChannelFactory = new(ChannelFactory)
